enum LogCategory {
    Information
    Warning
    Error
}
function ConvertFrom-Log {
<#
.SYNOPSIS
   Create a function that takes as the input a log file (generated by your Write-Log function) and output an array of objects (LogEntry type for instance). 
.DESCRIPTION
   The function should accept at least one parameter, that is the file name.
.PARAMETER FilePath
   Path where the log will read
.EXAMPLE
   Convert from file
   ConvertFrom-Log -Filepath C:\logs\mylog.txt
.INPUTS
   Message
.OUTPUTS
   Log file defined on FilePath
.NOTES
   Initial Version V1.0 - 20250312 - GAM: Added Description
#>
    param (
        [Parameter(Mandatory)]
        [Alias('Path')]
        [ValidateScript({Test-Path $_})]
        [String] $FilePath,

        [Parameter()] 
        [String] $Category,

        [Parameter()] 
        [datetime] $DateTime,

        [Parameter()] 
        [Char] $Delimiter = ";"
    )
<#
    if ((Test-Path $FilePath) -eq $false){

        Write-Output "$(Get-Date) - The Path: $FilePath  does not exist. Please check again."
        Break
    }
#>

    $LogEntries = Get-Content -Path $Filepath #-Delimiter $Delimiter

    ForEach ($LogEntrie in $LogEntries){
        $Date = $LogEntrie.Split($Delimiter)[0] -as [datetime]
        $Category = $LogEntrie.Split($Delimiter)[1]
        $Message = $LogEntrie.Split($Delimiter)[2]

          [PSCustomObject] @{
        "Date and Time" = $Date
        "Category" = $Category
        "Message" = $Message
         }

         class ReadLog {
            [datetime] $Date
            [string] $Category
            [string] $Message
         }



    }


   
 

}

